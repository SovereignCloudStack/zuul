---
- name: Install local server certs
  hosts: localhost
  become: false
  remote_user: "{{ lookup('env', 'USER') }}"

  tasks:
    - name: Create local directory
      ansible.builtin.file:
        path: "{{ playbook_dir }}/files"
        state: directory
      delegate_to: localhost

    # Create self-signed certificate, if configured.
    - name: Ensure private key is present
      community.crypto.openssl_privatekey:
        path: "{{ playbook_dir }}/files/server.key"
        size: 4096
        mode: "0600"
        type: RSA
        state: present

    - name: Ensure self-signed cert is present
      community.crypto.x509_certificate:
        path: "{{ playbook_dir }}/files/server.cert"
        privatekey_path: "{{ playbook_dir }}/files/server.key"
        provider: selfsigned
        selfsigned_not_after: "+365d"
        mode: "0644"
        state: present

    - name: Combine key and cert files
      ansible.builtin.shell:
        cmd: cat {{ playbook_dir }}/files/server.key {{ playbook_dir }}/files/server.cert > {{ playbook_dir }}/files/server.crt

    # create key pair if not provided
    # will be used for SSH access in cloud VMs
    - name: Create Nodepool SSH Keypair
      community.crypto.openssh_keypair:
        path: "{{ playbook_dir }}/files/nodepool"
        state: present

- name: Install pip using Ansible
  hosts: zuul
  become: true

  tasks:
    - name: Ensure python3-pip is available
      become: true
      ansible.builtin.apt:
        name: python3-pip
        state: present
        update_cache: true

# Setup SSH Keys
- name: Deploy Zuul Admin SSH Keys
  hosts: zuul
  become_user: ubuntu
  tasks:
    - name: Get SSH Keys from Github
      ansible.builtin.uri:
        url: "https://github.com/{{ item }}.keys"
        return_content: true
      register: ssh_keys
      with_items: "{{ add_ssh_keys_from_github }}"

    - name: Check if SSH key exists in authorized_keys
      ansible.builtin.shell:
        cmd: grep -q "{{ item.content }}" ~/.ssh/authorized_keys
      loop: "{{ ssh_keys.results }}"
      loop_control:
        loop_var: item
      register: ssh_key_existence
      ignore_errors: true

    - name: Add comment lines to ~/.ssh/authorized_keys
      ansible.builtin.lineinfile:
        path: ~/.ssh/authorized_keys
        line: "# {{ item }}"
        insertbefore: EOF
      loop: "{{ add_ssh_keys_from_github }}"
      register: comment_lines

    - name: Add SSH keys to ~/.ssh/authorized_keys
      ansible.builtin.lineinfile:
        path: ~/.ssh/authorized_keys
        line: "{{ item.content }}"
        insertafter: "{{ item.item }}"
      loop: "{{ ssh_keys.results }}"
      when: ssh_key_existence.results | selectattr('item', 'equalto', item.content) | length == 0
      loop_control:
        loop_var: item
      vars:
        ssh_key_existence: "{{ comment_lines }}"

# install everything necessary to use the osism zuul role
- name: Setup zuul playbook
  hosts: zuul
  vars_files:
    - "{{ playbook_dir }}/group_vars/zuul/zuul_vault.yaml"
  pre_tasks:
    - name: Ensure docker-compose is available
      become: true
      ansible.builtin.apt:
        name: docker-compose
        state: present
        update_cache: true

    - name: Ensure certbot is available
      become: true
      ansible.builtin.apt:
        name: certbot
        state: present

    - name: Install docker python libraries
      become: true
      ansible.builtin.pip:
        name: docker

    - name: Install docker-compose python libraries
      become: true
      ansible.builtin.pip:
        name: docker-compose

    - name: Install openstacksdk python libraries
      become: true
      ansible.builtin.pip:
        name: openstacksdk
        version: 2.0.0
 
    - name: Ensure group "zuul" exists
      ansible.builtin.group:
        name: zuul
        state: present

    - name: Ensure the user 'zuul' exists
      ansible.builtin.user:
        name: zuul
        shell: /bin/bash
        groups: zuul
        append: true

    # get package-installs.yaml in place to provide additional
    # software configuration for the cloud images
    - name: Deploy package-installs.yaml file
      ansible.builtin.copy:
        src: package-installs.yaml
        dest: /srv/nodepool/elements/package-installs.yaml
        owner: root
        group: zuul
        mode: 0644
      become: true

    - name: Ensure group "mysql" exists
      ansible.builtin.group:
        name: mysql
        state: present

    - name: Ensure the user 'mysql' exists
      ansible.builtin.user:
        name: mysql
        shell: /bin/bash
        groups: mysql
        append: true

    - name: Create mysql directory
      become: true
      ansible.builtin.file:
        state: directory
        path: "{{ zuul_base_conf_dir }}/mysql"
        owner: "mysql"
        group: "mysql"
        mode: 0755

  roles:
    # use local zuul role to deploy a basic zuul setup
    - name: setup zuul role
      role: zuul
      become: true
      vars:
        zuul_auth_secret: "{{ vault_zuul_auth_secret }}"

        zuul_zookeeper_metrics: true
        zuul_metrics_statsd_host: "{{ zuul_statsd_host }}"

        zuul_database:
          user_name: "{{ vault_db_user_name }}"
          user_pass: "{{ vault_db_user_pass }}"
          root_pass: "{{ vault_db_root_pass }}"
          db_name: "{{ vault_db_name }}"

        zuul_connections:
          # since we want to interact with github we need
          # a github app. The apps values go here.
          # Read more about github application: https://docs.github.com/en/apps/creating-github-apps/setting-up-a-github-app/about-creating-github-apps
          githubzuulapp:
            driver: github
            webhook_token: "{{ vault_github_webhook_token }}"
            app_id: "{{ vault_github_app_id }}"
            app_key: "{{ vault_github_app_path }}"
          # we include public job definitions here
          opendevorg:
            name: opendev
            driver: git
            baseurl: https://opendev.org
          # To view Zuul reports in the Matrix chat, we must use Zuul MQTT reports.
          # Since the direct path from MQTT to Matrix is unsupported,
          # we send MQTT reports through the zuul-mqtt-matrix-bridge,
          # which acts as a relay, transferring MQTT reports from Zuul to the Matrix chat.
          mqtt:
            name: mqtt
            driver: mqtt
            server: "{{ vault_mqtt_server }}"
            port: "{{ vault_mqtt_port }}"
            user: "{{ vault_mqtt_user }}"
            password: "{{ vault_mqtt_password }}"

        # nodepool providers configuration containing the openstack part
        # and the DIB (disk image builder)
        zuul_nodepool_providers:
          elements-dir: /srv/nodepool/elements
          diskimages:
            - name: base
              abstract: true
              elements:
                - vm
                - block-device-efi
                - growroot
                - enable-serial-console
                - cloud-init
                - pkg-map
                - infra-package-needs
                - zuul-worker
              formats:
                - qcow2
              env-vars:
                TMPDIR: /srv/dib_tmp
                DIB_CHECKSUM: "1"
                DIB_IMAGE_CACHE: /srv/dib_cache
                DIB_CLOUD_INIT_DATASOURCES: OpenStack

            - name: ubuntu-jammy
              parent: base
              pause: false
              rebuild-age: 86400
              elements:
                - ubuntu-minimal
              release: jammy
              username: ubuntu
              formats:
                - qcow2
              env-vars:
                DIB_APT_LOCAL_CACHE: "0"
                DIB_DISABLE_APT_CLEANUP: "1"
                FS_TYPE: ext3
                DIB_RELEASE: jammy

          providers:
            - name: gx-scs
              driver: openstack
              cloud: openstack
              region-name: "RegionOne"
              rate: 3.0
              boot-timeout: 180
              launch-retries: 3
              diskimages:
                - name: ubuntu-jammy
                  pause: false
              pools:
                - name: main
                  max-servers: 4
                  networks:
                    - zuul_network
                  security-groups:
                    - zuul_secgroup
                  labels:
                    - name: ubuntu-jammy
                      flavor-name: SCS-2V-8-20
                      diskimage: ubuntu-jammy
                      console-log: true
                      key-name: zuul-nodepool


# use certbot rule to utilize initial cert creation
- name: Install and configure certbot
  hosts: zuul
  become: true
  vars:
    certbot_install_method: package
    certbot_auto_renew: true
    certbot_create_if_missing: true
    certbot_create_method: webroot
    certbot_testmode: false
    certbot_admin_email: "{{ zuul_webserver_admin_mail }}"
    certbot_auto_renew_user: "root"
    certbot_certs:
      - webroot: "/opt/zuul/log_server"
        domains:
          - "{{ zuul_webserver_fqdn }}"
          - "{{ zuul_logserver_fqdn }}"
  roles:
    - geerlingguy.certbot
  tags:
    - certbot

- name: Amend httpd.conf to use letsencrypt certs
  hosts: zuul
  pre_tasks:
    - name: Insert ssl cert info for LetsEncrypt
      ansible.builtin.blockinfile:
        path: /opt/zuul/log_server/httpd.conf
        marker: "#<!-- {mark} ANSIBLE MANAGED BLOCK sslcerts -->"
        insertafter: "^SSLCertificateFile \"\/usr\/local\/apache2\/conf\/server.crt\""
        block: |
          SSLCertificateFile "/etc/letsencrypt/live/{{ zuul_webserver_fqdn }}/fullchain.pem"
          SSLCertificateKeyFile "/etc/letsencrypt/live/{{ zuul_webserver_fqdn }}/privkey.pem"
      tags:
        - httpd-config-change
        - config-change

    - name: Remove the unused SSLCertificateFile entry
      ansible.builtin.lineinfile:
        path: /opt/zuul/log_server/httpd.conf
        regexp: '^SSLCertificateFile "\/usr\/local\/apache2\/conf\/server.crt"'
        state: absent
      tags:
        - httpd-config-change
        - config-change

    # Restart the container with the new configuration
    - name: Restart zuul_log_server
      ansible.builtin.command: /usr/bin/docker restart zuul_log_server
      tags:
        - restart
        - config-change

- name: Remove locally created SSL certificates
  hosts: localhost
  become: false
  remote_user: "{{ lookup('env', 'USER') }}"

  tasks:
    - name: Remove SSL certificate files
      file:
        path: "{{ item }}"
        state: absent
      with_fileglob:
        - "{{ playbook_dir }}/files/*.key"
        - "{{ playbook_dir }}/files/*.cert"
        - "{{ playbook_dir }}/files/*.crt"
        - "{{ playbook_dir }}/files/nodepool*"
  tags: delete-certs

