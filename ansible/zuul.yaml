---
- name: Install local server certs
  hosts: localhost
  become: false
  remote_user: "{{ lookup('env', 'USER') }}"

  tasks:
    - name: Create local directory
      ansible.builtin.file:
        path: "{{ playbook_dir }}/files"
        state: directory
      delegate_to: localhost

    # Create self-signed certificate, if configured.
    - name: Ensure private key is present
      community.crypto.openssl_privatekey:
        path: "{{ playbook_dir }}/files/server.key"
        size: 4096
        mode: "0600"
        type: RSA
        state: present

    - name: Ensure self-signed cert is present
      community.crypto.x509_certificate:
        path: "{{ playbook_dir }}/files/server.cert"
        privatekey_path: "{{ playbook_dir }}/files/server.key"
        provider: selfsigned
        selfsigned_not_after: "+365d"
        mode: "0644"
        state: present

    - name: Combine key and cert files
      ansible.builtin.shell:
        cmd: cat {{ playbook_dir }}/files/server.key {{ playbook_dir }}/files/server.cert > {{ playbook_dir }}/files/server.crt

    # create key pair if not provided
    # will be used for SSH access in cloud VMs
    - name: Create Nodepool SSH Keypair
      community.crypto.openssh_keypair:
        path: "{{ playbook_dir }}/files/nodepool"
        state: present

- name: Disable unattended updates
  hosts: zuul
  become: true

  tasks:
    - name: Stop unattended-upgrades service
      become: true
      systemd:
        name: unattended-upgrades
        state: stopped

    - name: Disable unattended-upgrades service
      become: true
      systemd:
        name: unattended-upgrades
        enabled: no

    - name: Mask unattended-upgrades service
      become: true
      systemd:
        name: unattended-upgrades
        masked: yes

- name: Install pip using Ansible
  hosts: zuul
  become: true

  tasks:
    - name: Ensure python3-pip is available
      become: true
      ansible.builtin.apt:
        name: python3-pip
        state: present
        update_cache: true

# Setup SSH Keys
- name: Deploy Zuul Admin SSH Keys
  hosts: zuul
  become_user: ubuntu
  tasks:
    - name: Get SSH Keys from Github
      ansible.builtin.uri:
        url: "https://github.com/{{ item }}.keys"
        return_content: true
      register: ssh_keys
      with_items: "{{ add_ssh_keys_from_github }}"

    - name: Check if SSH key exists in authorized_keys
      ansible.builtin.shell:
        cmd: grep -q "{{ item.content }}" ~/.ssh/authorized_keys
      loop: "{{ ssh_keys.results }}"
      loop_control:
        loop_var: item
      register: ssh_key_existence
      ignore_errors: true

    - name: Add comment lines to ~/.ssh/authorized_keys
      ansible.builtin.lineinfile:
        path: ~/.ssh/authorized_keys
        line: "# {{ item }}"
        insertbefore: EOF
      loop: "{{ add_ssh_keys_from_github }}"
      register: comment_lines

    - name: Add SSH keys to ~/.ssh/authorized_keys
      ansible.builtin.lineinfile:
        path: ~/.ssh/authorized_keys
        line: "{{ item.content }}"
        insertafter: "{{ item.item }}"
      loop: "{{ ssh_keys.results }}"
      when: ssh_key_existence.results | selectattr('item', 'equalto', item.content) | length == 0
      loop_control:
        loop_var: item
      vars:
        ssh_key_existence: "{{ comment_lines }}"

# install everything necessary to use the osism zuul role
- name: Setup zuul playbook
  hosts: zuul
  vars_files:
    - "{{ playbook_dir }}/group_vars/zuul/zuul_vault.yaml"
  pre_tasks:
    - name: Ensure docker-compose is available
      become: true
      ansible.builtin.apt:
        name: docker-compose
        state: present
        update_cache: true

    - name: Ensure certbot is available
      become: true
      ansible.builtin.apt:
        name: certbot
        state: present

    - name: Install docker python libraries
      become: true
      ansible.builtin.pip:
        name: docker

    - name: Install docker-compose python libraries
      become: true
      ansible.builtin.pip:
        name: docker-compose

    - name: Install openstacksdk python libraries
      become: true
      ansible.builtin.pip:
        name: openstacksdk
        version: 2.0.0
 
    - name: Ensure group "zuul" exists
      ansible.builtin.group:
        name: zuul
        state: present

    - name: Ensure the user 'zuul' exists
      ansible.builtin.user:
        name: zuul
        shell: /bin/bash
        groups: zuul
        append: true

    # get package-installs.yaml in place to provide additional
    # software configuration for the cloud images
    - name: Deploy package-installs.yaml file
      ansible.builtin.copy:
        src: package-installs.yaml
        dest: /srv/nodepool/elements/package-installs.yaml
        owner: root
        group: zuul
        mode: 0644
      become: true

    - name: Ensure group "mysql" exists
      ansible.builtin.group:
        name: mysql
        state: present

    - name: Ensure the user 'mysql' exists
      ansible.builtin.user:
        name: mysql
        shell: /bin/bash
        groups: mysql
        append: true

    - name: Create mysql directory
      become: true
      ansible.builtin.file:
        state: directory
        path: "{{ zuul_base_conf_dir }}/mysql"
        owner: "mysql"
        group: "mysql"
        mode: 0755

  roles:
    # use local zuul role to deploy a basic zuul setup
    - name: setup zuul role
      role: zuul
      become: true

# use certbot rule to utilize initial cert creation
- name: Install and configure certbot
  hosts: zuul
  become: true
  vars:
    certbot_install_method: package
    certbot_auto_renew: true
    certbot_create_if_missing: true
    certbot_create_method: webroot
    certbot_testmode: false
    certbot_admin_email: "{{ zuul_webserver_admin_mail }}"
    certbot_auto_renew_user: "root"
    certbot_certs:
      - webroot: "/opt/zuul/log_server"
        domains:
          - "{{ zuul_webserver_fqdn }}"
          - "{{ zuul_logserver_fqdn }}"
  roles:
    - geerlingguy.certbot
  tags:
    - certbot

- name: Amend httpd.conf to use letsencrypt certs
  hosts: zuul
  pre_tasks:
    - name: Insert ssl cert info for LetsEncrypt
      ansible.builtin.blockinfile:
        path: /opt/zuul/log_server/httpd.conf
        marker: "#<!-- {mark} ANSIBLE MANAGED BLOCK sslcerts -->"
        insertafter: "^SSLCertificateFile \"\/usr\/local\/apache2\/conf\/server.crt\""
        block: |
          SSLCertificateFile "/etc/letsencrypt/live/{{ zuul_webserver_fqdn }}/fullchain.pem"
          SSLCertificateKeyFile "/etc/letsencrypt/live/{{ zuul_webserver_fqdn }}/privkey.pem"
      tags:
        - httpd-config-change
        - config-change

    - name: Remove the unused SSLCertificateFile entry
      ansible.builtin.lineinfile:
        path: /opt/zuul/log_server/httpd.conf
        regexp: '^SSLCertificateFile "\/usr\/local\/apache2\/conf\/server.crt"'
        state: absent
      tags:
        - httpd-config-change
        - config-change

    # Restart the container with the new configuration
    - name: Restart zuul_log_server
      ansible.builtin.command: /usr/bin/docker restart zuul_log_server
      tags:
        - restart
        - config-change

- name: Ensure the weekly cron job is present
  hosts: zuul
  become: yes

  tasks:
    - name: Check if the cron job for exporting Zuul master keys already exists
      shell: "crontab -l | grep -F 'sudo /usr/bin/docker exec zuul_executor zuul-admin export-keys /var/certs/masterkeys-backup.json'"
      register: cron_job_check
      ignore_errors: true

    - name: Add a cron job to export keys weekly at 2 AM every Monday if it doesn't exist
      cron:
        name: "Export Zuul master keys"
        minute: "0"
        hour: "2"
        day: "*"
        month: "*"
        weekday: "1" # 0 = Sunday, 1 = Monday, ..., 6 = Saturday
        job: "sudo /usr/bin/docker exec zuul_executor zuul-admin export-keys /var/certs/masterkeys-backup.json"
      when: cron_job_check.rc != 0

- name: Remove locally created SSL certificates
  hosts: localhost
  become: false
  remote_user: "{{ lookup('env', 'USER') }}"

  tasks:
    - name: Remove SSL certificate files
      file:
        path: "{{ item }}"
        state: absent
      with_fileglob:
        - "{{ playbook_dir }}/files/*.key"
        - "{{ playbook_dir }}/files/*.cert"
        - "{{ playbook_dir }}/files/*.crt"
        - "{{ playbook_dir }}/files/nodepool*"
  tags: delete-certs

- name: Set up log rotation for Docker, Zuul, and Nodepool logs
  hosts: zuul
  become: yes
  tasks:
    - name: Ensure docker daemon configuration directory exists
      file:
        path: /etc/docker
        state: directory

    - name: Create and configure /etc/docker/daemon.json
      copy:
        dest: /etc/docker/daemon.json
        content: |
          {
            "log-driver": "json-file",
            "log-opts": {
              "max-size": "10m",
              "max-file": "7"
            }
          }
      notify:
        - Restart Docker

    - name: Install logrotate
      apt:
        name: logrotate
        state: present

    - name: Configure logrotate for Zuul and Nodepool logs
      copy:
        dest: /etc/logrotate.d/zuul_nodepool_logs
        content: |
          /var/log/nodepool/*.log /var/log/zuul/*.log {
              daily
              rotate 10
              compress
              missingok
              notifempty
              copytruncate
              create 0640 root adm
              sharedscripts
              postrotate
                  # Add any necessary commands here if needed
              endscript
          }

    - name: Force logrotate to apply new configuration
      command: logrotate -f /etc/logrotate.d/zuul_nodepool_logs

  handlers:
    - name: Restart Docker
      service:
        name: docker
        state: restarted