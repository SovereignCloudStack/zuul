---
# create key pair if not provided
# will be used for SSH access in cloud VMs
- name: Generate SSH key for nodepool
  hosts: localhost
  tasks:
    - community.crypto.openssh_keypair:
        path: "{{ playbook_dir }}/zuul-nodepool"
        type: rsa
        size: 4096
        state: present

# - name: Pull caddy docker container
#   hosts: zuul
#   become: true
#   pre_tasks:
#     - name: Creates directory
#       file:
#         path: /opt/caddy
#         state: directory
#     - name: Copy file with owner and permissions
#       ansible.builtin.copy:
#         src: Caddyfile
#         dest: /opt/caddy/Caddyfile
#         owner: root
#         group: root
#         mode: '0644'
#   tasks:
#     - docker_image:
#         name: "caddy"
#         source: pull
#         state: present
#     - docker_container:
#         name: caddy
#         image: caddy
#         state: started
#         networks:
#           - name: "zuul_default"
#         ports:
#           - "0.0.0.0:80:80/tcp"
#           - "0.0.0.0:443:443/tcp"
#         volumes:
#           - /opt/caddy/Caddyfile:/etc/caddy/Caddyfile

# Setup SSH Keys
- name: Get SSH Keys for Zuul Admins from GitHub
  ansible.builtin.uri:
    url: "https://github.com/{{ item }}.keys"
    return_content: true
  register: ssh_keys
  with_items: {{ add_ssh_keys_from_github }} 

- name: Prepare Authorized Keys File
  ansible.builtin.lineinfile:
    path: ~/.ssh/authorized_keys
    line: '# {{ item }}'
  with_items: add_ssh_keys_from_github

- name: add SSH keys to ~/.ssh/authorized_keys
  ansible.builtin.lineinfile:
    path: ~/.ssh/authorized_keys
    line: "{{ item.0.content }}"
    insertafter: {{ item.1 }}
  with_together:
    - ssh_keys.results
    - add_ssh_keys_from_github

# install everything necessary to use the osism zuul role
- name: Setup zuul playbook
  hosts: zuul
  vars_files:
    - ./zuul-config.yaml
  pre_tasks:
    - name: install openstacksdk python libraries
      become: true
      ansible.builtin.pip:
        name: openstacksdk
        version: 2.0.0

    # create directory to place your cloud connection information in
    - name: Create /etc/openstack/
      ansible.builtin.file:
        state: directory
        path: /etc/openstack
        owner: root
        group: root
        mode: 0755
      become: true

    # copy cloud connection information to the right place
    - name: Deploy clouds.yaml file
      ansible.builtin.copy:
        src: clouds.yaml
        dest: /etc/openstack/clouds.yaml
        owner: root
        group: zuul
        mode: "0640"
      become: true

    - name: Upload previously created key to cloud
      openstack.cloud.keypair:
        cloud: gx-scs
        name: zuul-nodepool
        public_key: "{{ lookup('file', 'zuul-nodepool.pub') }}"
      become: true

    # get package-installs.yaml in place to provide additional
    # software configuration for the cloud images
    - name: Deploy package-installs.yaml file
      ansible.builtin.copy:
        src: package-installs.yaml
        dest: /srv/nodepool/elements/package-installs.yaml
        owner: root
        group: zuul
        mode: "0644"
      become: true

    # install recommended elements for zuul purposes
    - name: Deploy additionals elements used for DIB
      ansible.builtin.copy:
        src: elements/
        dest: /srv/nodepool/elements/
        owner: root
        group: zuul
        mode: "0644"
      become: true

    - name: Install docker python libraries
      become: true
      ansible.builtin.pip:
        name: docker

    - name: Install docker-compose python libraries
      become: true
      ansible.builtin.pip:
        name: docker-compose
  roles:
    # use zuul role provided by osism to deploy a basic zuul setup
    - name: setup zuul role
      role: osism.services.zuul
      vars:
        zuul_logserver_fqdn: "logs.scs.community"
        zuul_webserver_fqdn: "zuul.scs.community"
        # zuul_webserver_admin: "admin@example.org"
        # zuul_zookeeper_fqdn: "zookeeper01.example.org"

        zuul_auth_secret: {{ vault_zuul_auth_secret }}

        zuul_database:
          user_name: {{ vault_db_user_name }}
          user_pass: {{ vault_db_user_pass }}
          root_pass: {{ vault_db_root_pass }}
          db_name: {{ vault_db_name }}

        zuul_connections:
          # since we want to interact with github we need
          # a github app. The apps values go here.
          # Read more about github application: https://docs.github.com/en/apps/creating-github-apps/setting-up-a-github-app/about-creating-github-apps
          scs-github:
            driver: github
            webhook_token: "{{ vault_github_webhook_token }}"
            app_id: "{{ vault_github_app_id }}"
            app_key: "{{ vault_github_app_key }}"
          # we include public job definitions here  
          opendevorg:
            name: opendev
            driver: git
            baseurl: https://opendev.org

        zuul_tenants:
          - tenant:
              name: scs-dev
              source:
                opendevorg:
                  # just a repo to include some jobs definitions
                  untrusted-projects:
                    - zuul/zuul-jobs:
                        include:
                          - job
                scs-github:
                  config-projects:
                    - SovereignCloudStack/zuul-config:
                        load-branch: main

        # nodepool labels configuration
        zuul_nodepool_labels:
          labels:
            - name: ubuntu-jammy
              min-ready: 1


        # nodepool providers configuration containing the openstack part
        # and the DIB (disk image builder)
        zuul_nodepool_providers:
          elements-dir: /srv/nodepool/elements
          diskimages:
            - name: base
              abstract: True
              elements:
                - vm
                - block-device-efi
                - growroot
                - openssh-server
                - enable-serial-console
                - cloud-init
                - package-installs
                - pkg-map
                - infra-package-needs
                - zuul-worker
                - dib-python
                - ensure-venv
              formats:
                - qcow2
              env-vars:
                TMPDIR: /srv/dib_tmp
                DIB_CHECKSUM: "1"
                DIB_IMAGE_CACHE: /srv/dib_cache
                DIB_CLOUD_INIT_DATASOURCES: OpenStack

            - name: ubuntu-jammy
              parent: base
              pause: False
              rebuild-age: 86400
              elements:
                - ubuntu-minimal
              release: jammy
              username: ubuntu
              formats:
                - qcow2
              env-vars:
                DIB_APT_LOCAL_CACHE: "0"
                DIB_DISABLE_APT_CLEANUP: "1"
                FS_TYPE: ext3
                DIB_RELEASE: jammy

          providers:
            - name: gx-scs
              driver: openstack
              cloud: gx-scs_zuul-svc
              region-name: "scs1"
              rate: 1.0
              boot-timeout: 120
              launch-retries: 3
              diskimages:
                - name: ubuntu-jammy
                  pause: false
              pools:
                - name: main
                  max-servers: 10
                  networks:
                    - zuul_network
                  security-groups:
                    - zuul_secgroup
                  labels:
                    - name: ubuntu-jammy
                      flavor-name: SCS-2V-8-20
                      diskimage: ubuntu-jammy
                      console-log: True
                      key-name: nodepool
      become: true
